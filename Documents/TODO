Priority 1 (important)
----------------------
- write the "full description" paragraph in README
- find out where the null pointer exception hides. must have something
  to do with expanding/cancelling expansion; maybe also when items were
  deleted and expansion follows afterwards with new items; or simply when
  there are two items, and one or both are already processed
- list command should extract listed files from stdout and list them
  in a separate view, e.g. a drawer
- describe the list command in the README
- decide whether new documents should be created from the blown README;
  for instance: INSTALL, MANUAL
- table should be highlighted in some way while a valid drag hovers over it
- better error handling
  - throw an exception when anything goes wrong with loading the
    NSRegistration domain defaults
  - throw exception when shared NSUserDefaults object is null in
    AceExpanderPreferences()
  - throw exception when error occurs during
    AceExpanderThread.setArguments()
  - throw exception when state of AceExpanderItem is set to something
    invalid
  - throw exception when AceExpanderItem is created with theModel == null
  - throw exception when AceExpanderThread is created with theModel == null
- AceExpanderItem should notify somebody when the stdout and stderr
  texts change so that the result window can be updated

Priority 2 (nice to have)
-------------------------
- invisible button should not receive mouse clicks
- table should color-code states
- should be possible to change state by clicking on the table cell
- better file handling when a new item is created or its filename is
  set: e.g. what happens when it's a symlink? when it's an alias?
  when we don't have read permissions?  
- double click on table item expands it
- show spinning cursor while application launches
- entire path should be shown in tooltip for items in preferences dialog
- cancel button should become default button ("Enter" button) while
  expansion is in progress
- after selecting File-Open (and possibly other menu commands), the table
  should get the focus automatically so that Cmd-A can immediately select
  all items, without having to use the mouse to give the focus to the
  table
- password should not appear in clear text in result window

Priority 3 (not important)
--------------------------
- user default: choose destination folder only once per expand batch
- create test files that produce comments, that can be listed verbosely,
  and that require the "assume yes" option.
- user default: stop processing when a failure occurs
- preferences dialog: reset to factory settings -> removes all defaults in
  the application domain
- show main window when it is hidden and the user clicks on the
  application's dock icon
- delete key should also remove selected items
- when the user chooses the unace executable in the preferences dialog,
  a check should be made if the chosen file really is executable.
  This seems to be not so easy in Java, although in Obj-C the class
  NSFileManager can be used (isExecutableFileAtPath)
- show an icon in the preferences in the popup button for selecting the
  unace executable and the destination folder
- find out what the following message in the ProjectBuilder output window
  means:
  2004-06-18 03:10:48.430 AceExpander[1018] *** _NSAutoreleaseNoPool(): Object 0x15dd310 of class NSCFArray autoreleased with no pool in place - just leaking
- if a filename in the content list drawer starts with "*" it's password
  protected -> mark the file as such
- if the content list drawer or the result window don't show anything
  because the user selected more than one item -> indicate this somehow
- write drawer state (hidden/shown) to user defaults

Mac OS X 10.3
-------------
- when changing to Mac OS X 10.3, the following deprecated things
  should be corrected:
  - in the model: NSTableView.selectedRowEnumerator() should be replaced by
    NSTableView.selectedRowIndexes()
  - in the model: NSTableView.selectRow() should be replaced by
    NSTableView.selectRowIndexes()
- in Mac OS X 10.3, use Cocoa bindings to manage preferences. See
  http://developer.apple.com/cocoa/cocoabindings.html
